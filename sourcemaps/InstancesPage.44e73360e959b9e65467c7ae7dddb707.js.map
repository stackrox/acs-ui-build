{"version":3,"file":"js/InstancesPage.1646855320600.a404a90304129033c988.js","mappings":"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","sources":["webpack:///./src/components/BreadcrumbItemLink.js","webpack:///./src/routes/InstanceDetailsPage/InstanceDetailsPage.js","webpack:///./src/components/SelectSingle.js","webpack:///./src/routes/InstancesPage/CreateInstanceModal.js","webpack:///./src/routes/InstancesPage/DeleteInstanceModal.js","webpack:///./src/routes/InstancesPage/InstanceDetailsDrawer.js","webpack:///./src/routes/InstancesPage/ChangeOwnerModal.js","webpack:///./src/components/Status.js","webpack:///./src/routes/InstancesPage/InstancesPage.js","webpack:///./src/hooks/usePagination.js","webpack:///./src/utils/date.js"],"sourcesContent":["/* eslint-disable react/jsx-props-no-spreading */\n/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { BreadcrumbItem } from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\n\nfunction BreadcrumbItemLink({ children, to, ...rest }) {\n  function render({ className, ariaCurrent }) {\n    return (\n      <Link className={className} aria-current={ariaCurrent} to={to}>\n        {children}\n      </Link>\n    );\n  }\n  return <BreadcrumbItem {...rest} render={render} />;\n}\n\nexport default BreadcrumbItemLink;\n","import React from 'react';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { useParams } from 'react-router-dom';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Flex,\n  FlexItem,\n} from '@patternfly/react-core';\nimport BreadcrumbItemLink from '../../components/BreadcrumbItemLink';\n\nfunction InstanceDetailsPage() {\n  const { instanceName } = useParams();\n\n  return (\n    <div>\n      <PageHeader>\n        <Flex direction={{ default: 'column' }}>\n          <FlexItem>\n            <Breadcrumb>\n              <BreadcrumbItemLink to=\"/instances\">\n                ACS instances\n              </BreadcrumbItemLink>\n              <BreadcrumbItem isActive>{instanceName}</BreadcrumbItem>\n            </Breadcrumb>\n          </FlexItem>\n          <FlexItem>\n            <PageHeaderTitle title={instanceName} />\n          </FlexItem>\n        </Flex>\n      </PageHeader>\n      <Main />\n    </div>\n  );\n}\n\nexport default InstanceDetailsPage;\n","/* eslint-disable react/prop-types */\nimport React, { useState } from 'react';\nimport { Select, SelectVariant } from '@patternfly/react-core';\n\nfunction SelectSingle({\n  toggleIcon,\n  id,\n  value,\n  handleSelect,\n  isDisabled = false,\n  children,\n  direction = 'down',\n  isCreatable = false,\n  variant = null,\n  placeholderText = '',\n}) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const isTypeahead =\n    variant === 'typeahead' ? SelectVariant.typeahead : SelectVariant.single;\n\n  function onSelect(_event, selection) {\n    // The mouse event is not useful.\n    setIsOpen(false);\n    handleSelect(id, selection);\n  }\n\n  return (\n    <Select\n      variant={isTypeahead}\n      toggleIcon={toggleIcon}\n      id={id}\n      isDisabled={isDisabled}\n      isOpen={isOpen}\n      onSelect={onSelect}\n      onToggle={setIsOpen}\n      selections={value}\n      direction={direction}\n      isCreatable={isCreatable}\n      placeholderText={placeholderText}\n      toggleId={id}\n    >\n      {children}\n    </Select>\n  );\n}\n\nexport default SelectSingle;\n","/* eslint-disable react/prop-types */\nimport {\n  Button,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  SelectOption,\n  TextInput,\n  Tile,\n  ToggleGroup,\n  ToggleGroupItem,\n} from '@patternfly/react-core';\nimport React, { useState } from 'react';\nimport SelectSingle from '../../components/SelectSingle';\n\nconst defaultFormValues = {\n  name: '',\n  cloudProvider: 'Amazon Web Services',\n  cloudRegion: 'US-East',\n  availabilityZones: 'multi',\n  owner: 'bob@redhat.com',\n  status: 'READY',\n  timeCreated: new Date(),\n};\n\nfunction CreateInstanceModal({ isOpen, onClose, onRequestCreate }) {\n  const [formValues, setFormValues] = useState(defaultFormValues);\n  const [isRequestingCreate, setIsRequestingCreate] = useState(false);\n\n  function onChangeAvailabilityZones(isSelected, event) {\n    const { id } = event.currentTarget;\n    setFormValues((prevFormValues) => ({\n      ...prevFormValues,\n      availabilityZones: id,\n    }));\n  }\n\n  function onCloudRegionSelect(id, selection) {\n    setFormValues((prevFormValues) => ({\n      ...prevFormValues,\n      cloudRegion: selection,\n    }));\n  }\n\n  function onInputChange(value) {\n    setFormValues((prevFormValues) => ({\n      ...prevFormValues,\n      name: value,\n    }));\n  }\n\n  async function onRequestCreateHandler() {\n    setIsRequestingCreate(true);\n    const result = await onRequestCreate(formValues);\n    setIsRequestingCreate(false);\n    if (result.error) {\n      // Do something\n    } else {\n      setFormValues(defaultFormValues);\n      onClose();\n    }\n  }\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title=\"Create ACS instance\"\n      isOpen={isOpen}\n      onClose={onClose}\n      actions={[\n        <Button\n          key=\"createInstance\"\n          variant=\"primary\"\n          onClick={onRequestCreateHandler}\n          isLoading={isRequestingCreate}\n          isDisabled={isRequestingCreate || !formValues?.name}\n        >\n          Create instance\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={onClose}\n          isDisabled={isRequestingCreate}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      <Form>\n        <FormGroup\n          label=\"Name\"\n          isRequired\n          fieldId=\"name\"\n          helperText=\"Must start with a letter and end with a letter or number. Valid characters include lowercase letters from a to z, numbers from 0 to 9, and hyphens ( - ).\"\n        >\n          <TextInput\n            isRequired\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            value={formValues.name}\n            onChange={onInputChange}\n          />\n        </FormGroup>\n        <FormGroup label=\"Cloud provider\" isRequired fieldId=\"cloudProvider\">\n          <Tile\n            title=\"Amazon Web Services\"\n            isSelected={formValues.cloudProvider === 'Amazon Web Services'}\n          />\n        </FormGroup>\n        <FormGroup label=\"Cloud region\" isRequired fieldId=\"cloudRegion\">\n          <SelectSingle\n            id=\"cloudRegion\"\n            value={formValues.cloudRegion}\n            handleSelect={onCloudRegionSelect}\n            isDisabled\n          >\n            <SelectOption value=\"US-East\">US-East, N. Virginia</SelectOption>\n            <SelectOption value=\"EU-Ireland\">EU-Ireland</SelectOption>\n          </SelectSingle>\n        </FormGroup>\n        <FormGroup\n          label=\"Availability zones\"\n          isRequired\n          fieldId=\"availabilityZones\"\n        >\n          <ToggleGroup aria-label=\"Availability Zones\">\n            <ToggleGroupItem\n              text=\"Single\"\n              buttonId=\"single\"\n              isSelected={formValues.availabilityZones === 'single'}\n              onChange={onChangeAvailabilityZones}\n              isDisabled\n            />\n            <ToggleGroupItem\n              text=\"Multi\"\n              buttonId=\"multi\"\n              isSelected={formValues.availabilityZones === 'multi'}\n              onChange={onChangeAvailabilityZones}\n            />\n          </ToggleGroup>\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n}\n\nexport default CreateInstanceModal;\n","/* eslint-disable react/prop-types */\nimport {\n  Button,\n  Form,\n  FormGroup,\n  HelperText,\n  HelperTextItem,\n  Modal,\n  ModalVariant,\n  TextInput,\n} from '@patternfly/react-core';\nimport React, { useState } from 'react';\n\nfunction DeleteInstanceModal({ isOpen, instance, onRequestDelete, onClose }) {\n  const [inputValue, setInputValue] = useState('');\n  const [isRequestingDelete, setIsRequestingDelete] = useState(false);\n\n  async function onRequestDeleteHandler() {\n    setIsRequestingDelete(true);\n    const result = await onRequestDelete();\n    setIsRequestingDelete(false);\n    if (result.error) {\n      // Do something\n    } else {\n      setInputValue('');\n      onClose();\n    }\n  }\n\n  if (!instance) return null;\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title=\"Delete instance?\"\n      isOpen={isOpen}\n      onClose={onClose}\n      actions={[\n        <Button\n          key=\"createInstance\"\n          variant=\"danger\"\n          onClick={onRequestDeleteHandler}\n          isLoading={isRequestingDelete}\n          isDisabled={isRequestingDelete || instance.name !== inputValue}\n        >\n          Delete instance\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={onClose}\n          isDisabled={isRequestingDelete}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      <div className=\"pf-u-pb-md\">\n        <div>\n          This will permanently delete{' '}\n          <span className=\"pf-u-font-weight-bold\">{instance.name}</span>.\n        </div>\n        <div>This action cannot be undone.</div>\n      </div>\n      <Form>\n        <FormGroup\n          label=\"Confirmation\"\n          isRequired\n          fieldId=\"confirmationInstanceName\"\n        >\n          <TextInput\n            isRequired\n            type=\"text\"\n            id=\"confirmationInstanceName\"\n            name=\"confirmationInstanceName\"\n            value={inputValue}\n            onChange={setInputValue}\n          />\n        </FormGroup>\n        <HelperText>\n          <HelperTextItem>\n            Type <span className=\"pf-u-font-weight-bold\">{instance.name}</span>{' '}\n            to confirm.\n          </HelperTextItem>\n        </HelperText>\n      </Form>\n    </Modal>\n  );\n}\n\nexport default DeleteInstanceModal;\n","/* eslint-disable react/prop-types */\nimport {\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Divider,\n  Drawer,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerContentBody,\n  DrawerHead,\n  DrawerPanelContent,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport React from 'react';\n\nfunction InstanceDetailsDrawer({ isExpanded, onClose, instance, children }) {\n  return (\n    <Drawer isExpanded={isExpanded}>\n      <DrawerContent\n        panelContent={\n          <DrawerPanelContent>\n            <DrawerHead>\n              <div>\n                <TextContent>\n                  <Text component={TextVariants.small}>Name</Text>\n                </TextContent>\n                <TextContent>\n                  <Text component={TextVariants.h1}>{instance?.name}</Text>\n                </TextContent>\n              </div>\n              <DrawerActions>\n                <DrawerCloseButton onClick={onClose} />\n              </DrawerActions>\n            </DrawerHead>\n            <Divider component=\"div\" />\n            <DrawerContentBody>\n              <DescriptionList isHorizontal>\n                <DescriptionListGroup>\n                  <DescriptionListTerm>Cloud provider</DescriptionListTerm>\n                  <DescriptionListDescription>\n                    {instance?.cloudProvider}\n                  </DescriptionListDescription>\n                </DescriptionListGroup>\n                <DescriptionListGroup>\n                  <DescriptionListTerm>Region</DescriptionListTerm>\n                  <DescriptionListDescription>\n                    {instance?.cloudRegion}\n                  </DescriptionListDescription>\n                </DescriptionListGroup>\n                <DescriptionListGroup>\n                  <DescriptionListTerm>ID</DescriptionListTerm>\n                  <DescriptionListDescription>\n                    {instance?.id || 'N/A'}\n                  </DescriptionListDescription>\n                </DescriptionListGroup>\n                <DescriptionListGroup>\n                  <DescriptionListTerm>Owner</DescriptionListTerm>\n                  <DescriptionListDescription>\n                    {instance?.owner || 'N/A'}\n                  </DescriptionListDescription>\n                </DescriptionListGroup>\n                <DescriptionListGroup>\n                  <DescriptionListTerm>Created</DescriptionListTerm>\n                  <DescriptionListDescription>\n                    {instance?.created || 'N/A'}\n                  </DescriptionListDescription>\n                </DescriptionListGroup>\n                <DescriptionListGroup>\n                  <DescriptionListTerm>Updated</DescriptionListTerm>\n                  <DescriptionListDescription>\n                    {instance?.updated || 'N/A'}\n                  </DescriptionListDescription>\n                </DescriptionListGroup>\n              </DescriptionList>\n            </DrawerContentBody>\n          </DrawerPanelContent>\n        }\n      >\n        {children}\n      </DrawerContent>\n    </Drawer>\n  );\n}\n\nexport default InstanceDetailsDrawer;\n","/* eslint-disable react/prop-types */\nimport {\n  Button,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  TextContent,\n  Text,\n  TextVariants,\n  SelectOption,\n} from '@patternfly/react-core';\nimport React, { useState } from 'react';\n\nimport SelectSingle from '../../components/SelectSingle';\n\nfunction ChangeOwnerModal({\n  isOpen,\n  changingOwner,\n  possibleOwners,\n  onRequestChangeOwner,\n  onClose,\n}) {\n  const [newOwner, setNewOwner] = useState('');\n  const [isRequestingChangeOwner, setIsRequestingChangeOwner] = useState(false);\n\n  if (!changingOwner) return null;\n\n  async function onRequestChangeOwnerHandler() {\n    setIsRequestingChangeOwner(true);\n    const result = await onRequestChangeOwner(newOwner);\n    setIsRequestingChangeOwner(false);\n    if (result.error) {\n      // Do something\n    } else {\n      setNewOwner('');\n      onClose();\n    }\n  }\n\n  function onNewOwnerSelect(id, selection) {\n    setNewOwner(selection);\n  }\n\n  return (\n    <Modal\n      style={{ overflow: 'inherit' }}\n      variant={ModalVariant.small}\n      title=\"Change owner\"\n      isOpen={isOpen}\n      onClose={onClose}\n      actions={[\n        <Button\n          key=\"changeOwner\"\n          variant=\"primary\"\n          onClick={onRequestChangeOwnerHandler}\n          isLoading={isRequestingChangeOwner}\n          isDisabled={isRequestingChangeOwner || !newOwner}\n        >\n          Change owner\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={onClose}\n          isDisabled={isRequestingChangeOwner}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      <Form>\n        <FormGroup label=\"Current owner\" fieldId=\"currentOwner\">\n          <TextContent>\n            <Text component={TextVariants.p}>\n              {changingOwner.instance.owner}\n            </Text>\n          </TextContent>\n        </FormGroup>\n        <FormGroup label=\"New Owner\" isRequired fieldId=\"newOwner\">\n          <SelectSingle\n            id=\"newOwner\"\n            value={newOwner}\n            handleSelect={onNewOwnerSelect}\n            placeholderText=\"Select new owner...\"\n          >\n            {possibleOwners.map((owner) => (\n              <SelectOption key={owner} value={owner}>\n                {owner}\n              </SelectOption>\n            ))}\n          </SelectSingle>\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n}\n\nexport default ChangeOwnerModal;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { CheckCircleIcon } from '@patternfly/react-icons';\nimport { Flex, FlexItem } from '@patternfly/react-core';\n\nfunction Status({ status }) {\n  switch (status) {\n    case 'READY':\n      return (\n        <Flex>\n          <FlexItem>\n            <CheckCircleIcon className=\"pf-u-success-color-100\" />\n          </FlexItem>\n          <FlexItem>Ready</FlexItem>\n        </Flex>\n      );\n    default:\n      return 'N/A';\n  }\n}\n\nexport default Status;\n","import React, { useEffect, useState } from 'react';\nimport { Link, withRouter, useHistory } from 'react-router-dom';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  Title,\n  EmptyStateBody,\n  EmptyStatePrimary,\n  Button,\n  Card,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n  Pagination,\n} from '@patternfly/react-core';\nimport {\n  ActionsColumn,\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\nimport { CubesIcon } from '@patternfly/react-icons';\n\nimport usePagination from '../../hooks/usePagination';\n\nimport CreateInstanceModal from './CreateInstanceModal';\nimport DeleteInstanceModal from './DeleteInstanceModal';\nimport InstanceDetailsDrawer from './InstanceDetailsDrawer';\nimport ChangeOwnerModal from './ChangeOwnerModal';\nimport { getDateTime } from '../../utils/date';\nimport Status from '../../components/Status';\n\nconst defaultInstances = [\n  {\n    name: 'acs-instance-1',\n    cloudProvider: 'Amazon Web Services',\n    cloudRegion: 'US-East',\n    availabilityZones: 'multi',\n    owner: 'bob@redhat.com',\n    status: 'READY',\n    timeCreated: new Date(),\n  },\n];\nconst possibleOwners = ['alice@redhat.com', 'bob@redhat.com', 'eve@redhat.com'];\n\n/**\n * A smart component that handles all the api calls and data needed by the dumb components.\n * Smart components are usually classes.\n *\n * https://reactjs.org/docs/components-and-props.html\n * https://medium.com/@thejasonfile/dumb-components-and-smart-components-e7b33a698d43\n */\nfunction InstancesPage() {\n  const history = useHistory();\n  const [instances, setInstances] = useState(defaultInstances);\n  const { page, perPage, onSetPage, onPerPageSelect } = usePagination();\n  const [creatingInstance, setCreatingInstance] = useState(null);\n  const [deletingInstance, setDeletingInstance] = useState(null);\n  const [viewingInstance, setViewingInstance] = useState(null);\n  const [changingOwner, setChangingOwner] = useState(null);\n\n  useEffect(() => {\n    insights?.chrome?.appAction?.('sample-page');\n  }, []);\n\n  function createInstance(values) {\n    const promise = new Promise((resolve) => {\n      setTimeout(() => {\n        setInstances((prevInstances) => [...prevInstances, values]);\n        resolve({ error: null });\n      }, 1000);\n    });\n    return promise;\n  }\n\n  function closeCreateInstanceModal() {\n    setCreatingInstance(null);\n  }\n\n  function deleteInstance() {\n    const promise = new Promise((resolve) => {\n      setTimeout(() => {\n        setInstances((prevInstances) =>\n          prevInstances.filter((datum) => datum.name !== deletingInstance.name)\n        );\n        resolve({ error: null });\n      }, 2000);\n    });\n    return promise;\n  }\n\n  function closeDeleteInstanceModal() {\n    setDeletingInstance(null);\n  }\n\n  function changeOwner(newOwner) {\n    const promise = new Promise((resolve) => {\n      setTimeout(() => {\n        setInstances((prevInstances) => {\n          const newInstances = prevInstances.map((instance) => {\n            const modifiedInstance = { ...instance };\n            if (changingOwner.instance.name === instance.name) {\n              modifiedInstance.owner = newOwner;\n            }\n            return modifiedInstance;\n          });\n          return newInstances;\n        });\n        resolve({ error: null });\n      }, 2000);\n    });\n    return promise;\n  }\n\n  function closeChangingOwnerModal() {\n    setChangingOwner(null);\n  }\n\n  function closeInstanceDetailsDrawer() {\n    setViewingInstance(null);\n  }\n\n  return (\n    <InstanceDetailsDrawer\n      isExpanded={!!viewingInstance}\n      instance={viewingInstance}\n      onClose={closeInstanceDetailsDrawer}\n    >\n      <PageHeader>\n        <PageHeaderTitle title=\"ACS Instances\" />\n      </PageHeader>\n      <Main>\n        <Card>\n          {instances?.length === 0 ? (\n            <EmptyState>\n              <EmptyStateIcon icon={CubesIcon} />\n              <Title size=\"lg\" headingLevel=\"h4\">\n                No ACS instances.\n              </Title>\n              <EmptyStateBody>Create one to get started.</EmptyStateBody>\n              <EmptyStatePrimary>\n                <Button\n                  variant=\"primary\"\n                  onClick={() => setCreatingInstance({})}\n                >\n                  Create ACS instance\n                </Button>\n              </EmptyStatePrimary>\n            </EmptyState>\n          ) : (\n            <>\n              <Toolbar>\n                <ToolbarContent>\n                  <ToolbarItem>\n                    <Button\n                      variant=\"primary\"\n                      onClick={() => setCreatingInstance({})}\n                    >\n                      Create ACS instance\n                    </Button>\n                  </ToolbarItem>\n                  <ToolbarItem\n                    variant=\"pagination\"\n                    align={{ default: 'alignRight' }}\n                  >\n                    <Pagination\n                      itemCount={instances.length}\n                      perPage={perPage}\n                      page={page}\n                      onSetPage={onSetPage}\n                      widgetId=\"acs-instances-top-pagination\"\n                      onPerPageSelect={onPerPageSelect}\n                      isCompact\n                    />\n                  </ToolbarItem>\n                </ToolbarContent>\n              </Toolbar>\n              <TableComposable aria-label=\"ACS instances table\">\n                <Thead>\n                  <Tr>\n                    <Th>Name</Th>\n                    <Th>Cloud Provider</Th>\n                    <Th>Region</Th>\n                    <Th>Owner</Th>\n                    <Th>Status</Th>\n                    <Th>Time Created</Th>\n                    <Th />\n                  </Tr>\n                </Thead>\n                <Tbody>\n                  {instances.map((instance) => (\n                    <Tr\n                      key={instance.name}\n                      onRowClick={(event) => {\n                        if (event.target.getAttribute('type') !== 'button') {\n                          setViewingInstance(instance);\n                        }\n                      }}\n                      isRowSelected={viewingInstance?.name === instance?.name}\n                    >\n                      <Td dataLabel=\"Name\">\n                        <Link to={`/instances/instance/${instance.name}`}>\n                          {instance.name}\n                        </Link>\n                      </Td>\n                      <Td dataLabel=\"Cloud Provider\">\n                        {instance.cloudProvider}\n                      </Td>\n                      <Td dataLabel=\"Region\">{instance.cloudRegion}</Td>\n                      <Td dataLabel=\"Owner\">{instance.owner}</Td>\n                      <Td dataLabel=\"Status\">\n                        <Status status={instance.status} />\n                      </Td>\n                      <Td dataLabel=\"Time Created<\">\n                        {getDateTime(instance.timeCreated)}\n                      </Td>\n                      <Td isActionCell>\n                        <ActionsColumn\n                          items={[\n                            {\n                              title: 'Details',\n                              onClick: (event) => {\n                                event.preventDefault();\n                                history.push(\n                                  `/instances/instance/${instance.name}`\n                                );\n                              },\n                            },\n                            {\n                              title: 'Change Owner',\n                              onClick: (event) => {\n                                event.preventDefault();\n                                setChangingOwner({\n                                  instance,\n                                  newOwner: null,\n                                });\n                              },\n                            },\n                            {\n                              title: 'Delete',\n                              onClick: (event) => {\n                                event.preventDefault();\n                                setDeletingInstance(instance);\n                              },\n                            },\n                          ]}\n                        />\n                      </Td>\n                    </Tr>\n                  ))}\n                </Tbody>\n              </TableComposable>\n              <Toolbar>\n                <ToolbarContent>\n                  <ToolbarItem\n                    variant=\"pagination\"\n                    align={{ default: 'alignRight' }}\n                  >\n                    <Pagination\n                      itemCount={instances.length}\n                      perPage={perPage}\n                      page={page}\n                      onSetPage={onSetPage}\n                      widgetId=\"acs-instances-top-pagination\"\n                      onPerPageSelect={onPerPageSelect}\n                    />\n                  </ToolbarItem>\n                </ToolbarContent>\n              </Toolbar>\n            </>\n          )}\n        </Card>\n        <CreateInstanceModal\n          isOpen={!!creatingInstance}\n          onClose={closeCreateInstanceModal}\n          onRequestCreate={createInstance}\n        />\n        <DeleteInstanceModal\n          instance={deletingInstance}\n          isOpen={!!deletingInstance}\n          onClose={closeDeleteInstanceModal}\n          onRequestDelete={deleteInstance}\n        />\n        <ChangeOwnerModal\n          isOpen={!!changingOwner}\n          changingOwner={changingOwner}\n          possibleOwners={possibleOwners}\n          onClose={closeChangingOwnerModal}\n          onRequestChangeOwner={changeOwner}\n        />\n      </Main>\n    </InstanceDetailsDrawer>\n  );\n}\n\nexport default withRouter(InstancesPage);\n","import { useState } from 'react';\n\nfunction usePagination() {\n  const [page, setPage] = useState(1);\n  const [perPage, setPerPage] = useState(20);\n\n  function onSetPage(_, newPage) {\n    setPage(newPage);\n  }\n\n  function onPerPageSelect(_, newPerPage) {\n    setPerPage(newPerPage);\n  }\n\n  return {\n    page,\n    perPage,\n    onSetPage,\n    onPerPageSelect,\n  };\n}\n\nexport default usePagination;\n","import { format } from 'date-fns';\n\nconst dateTimeFormat = 'MM/dd/yyyy | h:mm:ss a';\n\nexport function getDateTime(timestamp) {\n  return format(timestamp, dateTimeFormat);\n}\n"],"names":["children","to","rest","BreadcrumbItem","render","className","ariaCurrent","Link","instanceName","useParams","PageHeader","Flex","direction","default","FlexItem","Breadcrumb","isActive","PageHeaderTitle","title","Main","toggleIcon","id","value","handleSelect","isDisabled","isCreatable","variant","placeholderText","useState","isOpen","setIsOpen","isTypeahead","SelectVariant","Select","onSelect","_event","selection","onToggle","selections","toggleId","defaultFormValues","name","cloudProvider","cloudRegion","availabilityZones","owner","status","timeCreated","Date","onClose","onRequestCreate","formValues","setFormValues","isRequestingCreate","setIsRequestingCreate","onChangeAvailabilityZones","isSelected","event","currentTarget","prevFormValues","result","error","Modal","ModalVariant","actions","Button","key","onClick","isLoading","Form","FormGroup","label","isRequired","fieldId","helperText","TextInput","type","onChange","Tile","SelectOption","ToggleGroup","ToggleGroupItem","text","buttonId","instance","onRequestDelete","inputValue","setInputValue","isRequestingDelete","setIsRequestingDelete","HelperText","HelperTextItem","isExpanded","Drawer","DrawerContent","panelContent","DrawerPanelContent","DrawerHead","TextContent","Text","component","TextVariants","DrawerActions","DrawerCloseButton","Divider","DrawerContentBody","DescriptionList","isHorizontal","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","created","updated","changingOwner","possibleOwners","onRequestChangeOwner","newOwner","setNewOwner","isRequestingChangeOwner","setIsRequestingChangeOwner","style","overflow","map","defaultInstances","withRouter","history","useHistory","instances","setInstances","page","setPage","perPage","setPerPage","onSetPage","_","newPage","onPerPageSelect","newPerPage","usePagination","creatingInstance","setCreatingInstance","deletingInstance","setDeletingInstance","viewingInstance","setViewingInstance","setChangingOwner","useEffect","insights","chrome","appAction","Card","length","EmptyState","EmptyStateIcon","icon","CubesIcon","Title","size","headingLevel","EmptyStateBody","EmptyStatePrimary","Toolbar","ToolbarContent","ToolbarItem","align","Pagination","itemCount","widgetId","isCompact","TableComposable","Thead","Tr","Th","Tbody","onRowClick","target","getAttribute","isRowSelected","Td","dataLabel","timestamp","format","isActionCell","ActionsColumn","items","preventDefault","push","values","Promise","resolve","setTimeout","prevInstances","filter","datum","promise","newInstances","modifiedInstance"],"sourceRoot":""}